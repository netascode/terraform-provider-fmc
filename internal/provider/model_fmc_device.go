// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-fmc/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type Device struct {
	Id               types.String `tfsdk:"id"`
	Domain           types.String `tfsdk:"domain"`
	Name             types.String `tfsdk:"name"`
	HostName         types.String `tfsdk:"host_name"`
	RegKey           types.String `tfsdk:"reg_key"`
	LicenseCaps      types.List   `tfsdk:"license_caps"`
	AccessPolicyId   types.String `tfsdk:"access_policy_id"`
	AccessPolicyName types.String `tfsdk:"access_policy_name"`
	Type             types.String `tfsdk:"type"`
}

//template:end types

//template:begin getPath
func (data Device) getPath() string {
	return "/api/fmc_config/v1/domain/{DOMAIN_UUID}/devices/devicerecords"
}

//template:end getPath

//template:begin toBody
func (data Device) toBody(ctx context.Context, state Device) string {
	body := ""
	if data.Id.ValueString() != "" {
		body, _ = sjson.Set(body, "id", data.Id.ValueString())
	}
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "name", data.Name.ValueString())
	}
	if !data.HostName.IsNull() {
		body, _ = sjson.Set(body, "hostName", data.HostName.ValueString())
	}
	if !data.RegKey.IsNull() {
		body, _ = sjson.Set(body, "regKey", data.RegKey.ValueString())
	}
	if !data.LicenseCaps.IsNull() {
		var values []string
		data.LicenseCaps.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "license_caps", values)
	}
	if !data.AccessPolicyId.IsNull() {
		body, _ = sjson.Set(body, "accessPolicy.id", data.AccessPolicyId.ValueString())
	}
	if !data.AccessPolicyName.IsNull() {
		body, _ = sjson.Set(body, "accessPolicy.name", data.AccessPolicyName.ValueString())
	}
	if !data.Type.IsNull() {
		body, _ = sjson.Set(body, "type", data.Type.ValueString())
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *Device) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("hostName"); value.Exists() {
		data.HostName = types.StringValue(value.String())
	} else {
		data.HostName = types.StringNull()
	}
	if value := res.Get("regKey"); value.Exists() {
		data.RegKey = types.StringValue(value.String())
	} else {
		data.RegKey = types.StringNull()
	}
	if value := res.Get("license_caps"); value.Exists() {
		data.LicenseCaps = helpers.GetStringList(value.Array())
	} else {
		data.LicenseCaps = types.ListNull(types.StringType)
	}
	if value := res.Get("accessPolicy.id"); value.Exists() {
		data.AccessPolicyId = types.StringValue(value.String())
	} else {
		data.AccessPolicyId = types.StringNull()
	}
	if value := res.Get("accessPolicy.name"); value.Exists() {
		data.AccessPolicyName = types.StringValue(value.String())
	} else {
		data.AccessPolicyName = types.StringNull()
	}
	if value := res.Get("type"); value.Exists() {
		data.Type = types.StringValue(value.String())
	} else {
		data.Type = types.StringNull()
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *Device) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("hostName"); value.Exists() && !data.HostName.IsNull() {
		data.HostName = types.StringValue(value.String())
	} else {
		data.HostName = types.StringNull()
	}
	if value := res.Get("regKey"); value.Exists() && !data.RegKey.IsNull() {
		data.RegKey = types.StringValue(value.String())
	} else {
		data.RegKey = types.StringNull()
	}
	if value := res.Get("license_caps"); value.Exists() && !data.LicenseCaps.IsNull() {
		data.LicenseCaps = helpers.GetStringList(value.Array())
	} else {
		data.LicenseCaps = types.ListNull(types.StringType)
	}
	if value := res.Get("accessPolicy.id"); value.Exists() && !data.AccessPolicyId.IsNull() {
		data.AccessPolicyId = types.StringValue(value.String())
	} else {
		data.AccessPolicyId = types.StringNull()
	}
	if value := res.Get("accessPolicy.name"); value.Exists() && !data.AccessPolicyName.IsNull() {
		data.AccessPolicyName = types.StringValue(value.String())
	} else {
		data.AccessPolicyName = types.StringNull()
	}
	if value := res.Get("type"); value.Exists() && !data.Type.IsNull() {
		data.Type = types.StringValue(value.String())
	} else {
		data.Type = types.StringNull()
	}
}

//template:end updateFromBody

//template:begin isNull
func (data *Device) isNull(ctx context.Context, res gjson.Result) bool {
	if !data.Name.IsNull() {
		return false
	}
	if !data.HostName.IsNull() {
		return false
	}
	if !data.RegKey.IsNull() {
		return false
	}
	if !data.LicenseCaps.IsNull() {
		return false
	}
	if !data.AccessPolicyId.IsNull() {
		return false
	}
	if !data.AccessPolicyName.IsNull() {
		return false
	}
	if !data.Type.IsNull() {
		return false
	}
	return true
}

//template:end isNull
